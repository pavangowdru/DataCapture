services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: echo srvr | nc zookeeper 2181 || exit 1
      interval: 30s
      timeout: 30s
      retries: 5
      start_period: 10s
    networks:
      - kafka-network

  broker:
    image: confluentinc/cp-kafka:latest
    restart: always
    hostname: broker
    container_name: broker
    ports:
      - "29092:29092"
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
    healthcheck:
      test: nc -z localhost 9092 || exit 1
      interval: 30s
      timeout: 30s
      retries: 5
      start_period: 10s
    networks:
      - kafka-network

  control-center:
    image: confluentinc/cp-enterprise-control-center:latest
    hostname: control-center
    container_name: control-center
    ports:
      - "9021:9021"
    depends_on:
      broker:
        condition: service_healthy
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: broker:29092
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      CONFLUENT_METRICS_ENABLE: "true"
      PORT: 9021
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9021/health"]
      interval: 30s
      timeout: 30s
      retries: 5
      start_period: 10s

  debezium:
    image: debezium/connect:2.5
    restart: always
    hostname: debezium
    container_name: debezium
    ports:
      - "8093:8083"
    depends_on:
      postgres:
        condition: service_healthy
      broker:
        condition: service_healthy
    environment:
      BOOTSTRAP_SERVERS: broker:29092
      CONNECT_REST_ADVERTISED_HOST_NAME: debezium
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: connect_configs
      OFFSET_STORAGE_TOPIC: connect_offsets
      STATUS_STORAGE_TOPIC: connect_status
      KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      ENABLE_DEBEZIUM_SCRIPTING: "true"
    healthcheck:
      test: ["CMD", "curl", "--fail", "--silent", "-X", "GET", "http://localhost:8083/connectors"]
      interval: 30s
      timeout: 30s
      retries: 5
      start_period: 10s
    networks:
      - kafka-network

  debezium-ui:
    image: debezium/debezium-ui:2.5
    restart: always
    hostname: debezium-ui
    container_name: debezium-ui
    ports:
      - "8080:8080"
    depends_on:
      debezium:
        condition: service_healthy
    environment:
      KAFKA_CONNECT_URIS: http://debezium:8083
      # DEBEZIUM_API_URL: http://debezium:8083
      # DEBEZIUM_UI_BACKEND_URL: http://debezium:8083
    networks:
      - kafka-network

  postgres:
    image: postgres:latest
    hostname: postgres
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: financial_db
    command: ["postgres", "-c", "wal_level=logical"]
    healthcheck:
      test: ["CMD", "psql", "-U", "postgres", "-c", "SELECT 1"]
      interval: 30s
      timeout: 30s
      retries: 5
    networks:
      - kafka-network

# Spark Master Node
  spark-master:
    image: bitnami/spark:3.4
    container_name: spark-master
    environment:
      SPARK_MODE: master
      SPARK_RPC_AUTHENTICATION_ENABLED: "no"
      SPARK_RPC_ENCRYPTION_ENABLED: "no"
      SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED: "no"
      SPARK_SSL_ENABLED: "no"
    ports:
      - "7077:7077"
      - "8088:8080"
    networks:
      - kafka-network

  # Spark Worker Node
  spark-worker:
    image: bitnami/spark:3.4
    container_name: spark-worker
    depends_on:
      - spark-master
    environment:
      SPARK_MODE: worker
      SPARK_MASTER_URL: spark://spark-master:7077
      SPARK_WORKER_MEMORY: 1G
      SPARK_WORKER_CORES: 2
    networks:
      - kafka-network

  # Elasticsearch Node
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.7.0
    container_name: elasticsearch_1
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - xpack.security.http.ssl.enabled=false
      - bootstrap.memory_lock=true
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - kafka-network

  # Kibana for Elasticsearch UI
  kibana:
    image: docker.elastic.co/kibana/kibana:8.7.0
    container_name: kibana_1
    depends_on:
      - elasticsearch
    ports:
      - "5601:5601"
    networks:
      - kafka-network


networks:
  kafka-network:
    name: kafka-network
    driver: bridge
